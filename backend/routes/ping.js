import express from 'express';
import Ping from '../models/Ping.js';

const router = express.Router();

// GET /api/ping - R√©cup√©rer tous les pings + cr√©er un nouveau ping de test
router.get('/', async (req, res) => {
  try {
    // Cr√©er un nouveau ping de test √† chaque requ√™te GET
    const newPing = await Ping.create({
      message: `Ping de test - ${new Date().toLocaleString('fr-FR')}`,
      ip: req.ip || req.connection.remoteAddress || 'unknown',
      userAgent: req.get('User-Agent') || 'unknown'
    });

    console.log('‚úÖ Nouveau ping cr√©√©:', newPing.message);

    // R√©cup√©rer tous les pings (les plus r√©cents en premier)
    const allPings = await Ping.find()
      .sort({ timestamp: -1 })
      .limit(50); // Limiter √† 50 pour √©viter la surcharge

    res.status(200).json({
      success: true,
      message: 'Ping API fonctionnelle !',
      data: {
        newPing: newPing,
        totalPings: allPings.length,
        allPings: allPings
      },
      timestamp: new Date().toISOString(),
      mongoStatus: 'connected'
    });

  } catch (error) {
    console.error('‚ùå Erreur ping API:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la cr√©ation/r√©cup√©ration des pings',
      error: error.message,
      timestamp: new Date().toISOString(),
      mongoStatus: 'error'
    });
  }
});

// POST /api/ping - Cr√©er un ping personnalis√©
router.post('/', async (req, res) => {
  try {
    const { message } = req.body;

    if (!message) {
      return res.status(400).json({
        success: false,
        message: 'Le champ "message" est requis'
      });
    }

    const newPing = await Ping.create({
      message: message,
      ip: req.ip || req.connection.remoteAddress || 'unknown',
      userAgent: req.get('User-Agent') || 'unknown'
    });

    console.log('‚úÖ Ping personnalis√© cr√©√©:', newPing.message);

    res.status(201).json({
      success: true,
      message: 'Ping cr√©√© avec succ√®s',
      data: newPing,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation ping:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la cr√©ation du ping',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// DELETE /api/ping - Supprimer tous les pings (utile pour les tests)
router.delete('/', async (req, res) => {
  try {
    const result = await Ping.deleteMany({});
    
    console.log(`üóëÔ∏è ${result.deletedCount} pings supprim√©s`);

    res.status(200).json({
      success: true,
      message: `${result.deletedCount} pings supprim√©s avec succ√®s`,
      deletedCount: result.deletedCount,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erreur suppression pings:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la suppression des pings',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// GET /api/ping/stats - Statistiques des pings
router.get('/stats', async (req, res) => {
  try {
    const totalPings = await Ping.countDocuments();
    const recentPings = await Ping.countDocuments({
      timestamp: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) } // Derni√®res 24h
    });

    const oldestPing = await Ping.findOne().sort({ timestamp: 1 });
    const newestPing = await Ping.findOne().sort({ timestamp: -1 });

    res.status(200).json({
      success: true,
      message: 'Statistiques des pings',
      data: {
        totalPings,
        recentPings,
        oldestPing: oldestPing ? oldestPing.timestamp : null,
        newestPing: newestPing ? newestPing.timestamp : null
      },
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erreur stats pings:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des statistiques',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

export default router;
